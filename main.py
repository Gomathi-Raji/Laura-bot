import os
import subprocess
from datetime import datetime
from voice.speaker import speak
from voice.listener import listen
from ai.gemini_ai import get_response
from tasks.general_tasks import execute_command

# --- Smart Hardware Manager ---
from smart_hardware_manager import (
    get_hardware_manager, 
    smart_listen, 
    smart_speak, 
    smart_visual_feedback,
    smart_gesture_recognition,
    initialize_smart_hardware
)

# --- Tamil to Hindi Translator Imports ---
from translator.speech_input import recognize_speech
from translator.translator_engine import translate_tamil_to_hindi
from translator.speech_output import speak_text

# --- Language Learning Mode Imports ---
from translator.language_learning_mode import language_learner

# --- Debate Mode Imports ---
from ai.debate_mode import debate_mode

# --- GIF Display Imports ---
import speech_recognition as sr
import tkinter as tk
from PIL import Image, ImageTk, ImageSequence

# --- Spotify Integration Imports ---
import spotipy
from spotipy.oauth2 import SpotifyOAuth
import webbrowser
from config import SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET, SPOTIFY_REDIRECT_URI


# --- Logging Function ---
def log_conversation(role, message):
    log_path = os.path.join(os.getcwd(), "conversation_log.txt")
    with open(log_path, "a", encoding="utf-8") as log_file:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_file.write(f"[{timestamp}] {role}: {message}\n")


# --- GIF Display Configuration ---
speech_to_gif = {
    "hello": "hello.gif",
    "thank you": "thanks.gif",
    "yes": "yes.gif",
    "no": "no.gif"
}


def listen_and_show_gif():
    """Listen for speech and display corresponding GIF"""
    recognizer = sr.Recognizer()
    mic = sr.Microphone()

    with mic as source:
        print("ЁЯОд Listening for GIF trigger words...")
        speak("GIF роорпБро▒рпИропро┐ро▓рпН роХрпЗроЯрпНроХро┐ро▒рпЗройрпН...")
        audio = recognizer.listen(source)

    try:
        command = recognizer.recognize_google(audio).lower()
        print(f"ЁЯЧгя╕П You said: {command}")
        log_conversation("User", command)

        for word in speech_to_gif:
            if word in command:
                gif_path = f"zara_assets/gif_output/{speech_to_gif[word]}"
                show_gif(gif_path)
                break
        else:
            print("тЭМ No matching GIF found for command")
            speak("роЕроирпНрод ро╡ро╛ро░рпНродрпНродрпИроХрпНроХрпБ GIF роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ.")
    except Exception as e:
        print(f"тЭМ Could not understand audio: {e}")
        speak("роЙроЩрпНроХро│рпН рокрпЗроЪрпНроЪрпИ рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ.")


def show_gif(gif_path):
    """Display animated GIF in a window"""
    if not os.path.exists(gif_path):
        print(f"тЭМ GIF file not found: {gif_path}")
        speak("GIF роХрпЛрокрпНрокрпБ роХро╛рогро╡ро┐ро▓рпНро▓рпИ.")
        return

    try:
        root = tk.Tk()
        root.title("Zara GIF Output")
        root.geometry("400x400")

        gif = Image.open(gif_path)
        frames = [ImageTk.PhotoImage(frame.copy().convert('RGBA')) for frame in ImageSequence.Iterator(gif)]

        label = tk.Label(root)
        label.pack(expand=True)

        def update(index):
            frame = frames[index]
            index = (index + 1) % len(frames)
            label.configure(image=frame)
            root.after(100, update, index)

        root.after(0, update, 0)

        # Auto close after 5 seconds
        root.after(5000, root.destroy)
        root.mainloop()

    except Exception as e:
        print(f"тЭМ Error displaying GIF: {e}")
        speak("GIF роХро╛роЯрпНроЯ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ.")


# --- Spotify Integration Configuration ---
SPOTIFY_SCOPE = "user-modify-playback-state user-read-playback-state playlist-modify-public"


def clear_spotify_cache():
    """Clear Spotify authentication cache"""
    cache_files = [".cache", ".cache-*"]
    for pattern in cache_files:
        import glob
        for cache_file in glob.glob(pattern):
            try:
                os.remove(cache_file)
                print(f"ЁЯЧСя╕П Removed cache file: {cache_file}")
            except Exception as e:
                print(f"тЭМ Could not remove {cache_file}: {e}")


def initialize_spotify():
    """Initialize Spotify client with authentication"""
    try:
        # Clear any existing cache file
        cache_path = ".cache"
        if os.path.exists(cache_path):
            os.remove(cache_path)
            print("ЁЯЧСя╕П Cleared Spotify cache")

        sp_oauth = SpotifyOAuth(
            client_id=SPOTIFY_CLIENT_ID,
            client_secret=SPOTIFY_CLIENT_SECRET,
            redirect_uri=SPOTIFY_REDIRECT_URI,
            scope=SPOTIFY_SCOPE,
            cache_path=cache_path
        )

        spotify = spotipy.Spotify(auth_manager=sp_oauth)
        return spotify
    except Exception as e:
        print(f"тЭМ Spotify authentication failed: {e}")
        speak("Spotify роЗрогрпИрокрпНрокрпБ родрпЛро▓рпНро╡ро┐ропроЯрпИроирпНродродрпБ.")
        return None


def search_and_play_song_no_auth(song_query):
    """No authentication version - just open Spotify search"""
    try:
        # Direct Spotify web search without API
        search_url = f"https://open.spotify.com/search/{song_query.replace(' ', '%20')}"
        webbrowser.open(search_url)

        success_msg = f"{song_query} Spotify роЗро▓рпН родрпЗроЯрокрпНрокроЯрпНроЯродрпБ!"
        print(f"ЁЯМР {success_msg}")
        speak(f"{song_query} Spotify роЗро▓рпН родрпЗроЯрпБроХро┐ро▒рпЗройрпН.")
        log_conversation("Assistant", f"Searched Spotify for: {song_query}")
        return True

    except Exception as e:
        error_msg = f"рокро┐ро┤рпИ: {e}"
        print(f"тЭМ {error_msg}")
        speak("Spotify родрпЗроЯро▓ро┐ро▓рпН рокро┐ро┤рпИ.")
        return False


def search_and_play_song_simple(song_query):
    """Simple version - search and open in web browser"""
    try:
        spotify = initialize_spotify()
        if not spotify:
            # Fallback: search on web without authentication
            search_url = f"https://open.spotify.com/search/{song_query.replace(' ', '%20')}"
            webbrowser.open(search_url)
            fallback_msg = f"{song_query} ро╡рпЖрокрпН рокро┐ро│рпЗропро░ро┐ро▓рпН родрпЗроЯрпБроХро┐ро▒рпЗройрпН."
            print(f"ЁЯМР {fallback_msg}")
            speak(fallback_msg)
            return True

        print(f"ЁЯФН Searching for: {song_query}")
        speak(f"{song_query} родрпЗроЯрпБроХро┐ро▒рпЗройрпН...")

        # Search for the song
        results = spotify.search(q=song_query, type='track', limit=1)

        if results['tracks']['items']:
            track = results['tracks']['items'][0]
            track_name = track['name']
            artist_name = track['artists'][0]['name']

            print(f"ЁЯО╡ Found: {track_name} by {artist_name}")
            speak(f"{track_name} роХрогрпНроЯрпБрокро┐роЯро┐родрпНродрпЗройрпН. ро╡рпЖрокрпН рокро┐ро│рпЗропро░ро┐ро▓рпН родро┐ро▒роХрпНроХро┐ро▒рпЗройрпН...")
            log_conversation("Assistant", f"Opening: {track_name} by {artist_name}")

            # Always open in web browser (simpler approach)
            spotify_url = f"https://open.spotify.com/track/{track['id']}"
            webbrowser.open(spotify_url)

            success_msg = f"{track_name} ро╡рпЖрокрпН рокро┐ро│рпЗропро░ро┐ро▓рпН родро┐ро▒роХрпНроХрокрпНрокроЯрпНроЯродрпБ!"
            print(f"тЬЕ {success_msg}")
            speak(success_msg)
            return True
        else:
            not_found_msg = f"{song_query} рокро╛роЯро▓рпН роХрогрпНроЯрпБрокро┐роЯро┐роХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ."
            print(f"тЭМ {not_found_msg}")
            speak(not_found_msg)
            return False

    except Exception as e:
        # Fallback: direct web search
        search_url = f"https://open.spotify.com/search/{song_query.replace(' ', '%20')}"
        webbrowser.open(search_url)
        fallback_msg = f"{song_query} ро╡рпЖрокрпН рокро┐ро│рпЗропро░ро┐ро▓рпН родрпЗроЯрпБроХро┐ро▒рпЗройрпН."
        print(f"ЁЯМР {fallback_msg}")
        speak(fallback_msg)
        return True


def search_and_play_song(song_query):
    """Search for a song on Spotify and play it"""
    try:
        spotify = initialize_spotify()
        if not spotify:
            return False

        print(f"ЁЯФН Searching for: {song_query}")
        speak(f"{song_query} родрпЗроЯрпБроХро┐ро▒рпЗройрпН...")

        # Search for the song
        results = spotify.search(q=song_query, type='track', limit=1)

        if results['tracks']['items']:
            track = results['tracks']['items'][0]
            track_name = track['name']
            artist_name = track['artists'][0]['name']
            track_uri = track['uri']

            print(f"ЁЯО╡ Found: {track_name} by {artist_name}")
            speak(f"{track_name} роХрогрпНроЯрпБрокро┐роЯро┐родрпНродрпЗройрпН. роЗроЪрпИроХрпНроХро┐ро▒рпЗройрпН...")
            log_conversation("Assistant", f"Playing: {track_name} by {artist_name}")

            # Get available devices
            devices = spotify.devices()
            if devices['devices']:
                # Play the song on the first available device
                device_id = devices['devices'][0]['id']
                spotify.start_playback(device_id=device_id, uris=[track_uri])

                success_msg = f"{track_name} роЗроЪрпИроХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ!"
                print(f"тЬЕ {success_msg}")
                speak(success_msg)
                return True
            else:
                # No active device found, open Spotify web player
                spotify_url = f"https://open.spotify.com/track/{track['id']}"
                webbrowser.open(spotify_url)

                fallback_msg = "Spotify роЪро╛родройроорпН роЗро▓рпНро▓рпИ. ро╡рпЖрокрпН рокро┐ро│рпЗропро░ро┐ро▓рпН родро┐ро▒роХрпНроХро┐ро▒рпЗройрпН."
                print(f"тЪая╕П {fallback_msg}")
                speak(fallback_msg)
                return True
        else:
            not_found_msg = f"{song_query} рокро╛роЯро▓рпН роХрогрпНроЯрпБрокро┐роЯро┐роХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ."
            print(f"тЭМ {not_found_msg}")
            speak(not_found_msg)
            return False

    except Exception as e:
        error_msg = f"Spotify рокро┐ро┤рпИ: {e}"
        print(f"тЭМ {error_msg}")
        speak("Spotify роЗро▓рпН рокро┐ро┤рпИ роПро▒рпНрокроЯрпНроЯродрпБ.")
        return False


def listen_for_song_request():
    """Listen for song name and search/play it"""
    try:
        recognizer = sr.Recognizer()
        mic = sr.Microphone()

        speak("роОроирпНрод рокро╛роЯро▓рпИ роХрпЗроЯрпНроХ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН?")
        print("ЁЯОд Listening for song request...")

        with mic as source:
            recognizer.adjust_for_ambient_noise(source)
            audio = recognizer.listen(source, timeout=10)

        song_query = recognizer.recognize_google(audio)
        print(f"ЁЯО╡ Song request: {song_query}")
        log_conversation("User", f"Song request: {song_query}")

        return search_and_play_song_no_auth(song_query)  # Use no-auth version

    except sr.WaitTimeoutError:
        timeout_msg = "роирпЗро░роорпН роорпБроЯро┐роирпНродродрпБ. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН."
        print(f"тП░ {timeout_msg}")
        speak(timeout_msg)
        return False
    except Exception as e:
        error_msg = f"рокро╛роЯро▓рпН роХрпЛро░ро┐роХрпНроХрпИ рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ: {e}"
        print(f"тЭМ {error_msg}")
        speak("рокро╛роЯро▓рпН роХрпЛро░ро┐роХрпНроХрпИ рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ.")
        return False


# Function to open gesture recognition window
def open_gesture_window():
    try:
        gesture_script_path = os.path.join(os.getcwd(), "gesture", "gesture.py")
        if os.path.exists(gesture_script_path):
            subprocess.Popen(["python", gesture_script_path])
            speak("роХрпИ роЪрпИроХрпИ ро╡ро┐рогрпНроЯрпЛ родро┐ро▒роХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ...")
            log_conversation("Assistant", "роХрпИ роЪрпИроХрпИ ро╡ро┐рогрпНроЯрпЛ родро┐ро▒роХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ...")
        else:
            speak("роХрпИ роЪрпИроХрпИ роХрпЛрокрпНрокрпБ роХро╛рогро╡ро┐ро▓рпНро▓рпИ.")
            log_conversation("Assistant", "роХрпИ роЪрпИроХрпИ роХрпЛрокрпНрокрпБ роХро╛рогро╡ро┐ро▓рпНро▓рпИ.")
            print(f"[ERROR] Gesture file not found: {gesture_script_path}")
    except Exception as e:
        speak("роХрпИ роЪрпИроХрпИ роорпБро▒рпИ роЪрпЖропро▓рпНрокроЯро╡ро┐ро▓рпНро▓рпИ.")
        log_conversation("Assistant", "роХрпИ роЪрпИроХрпИ роорпБро▒рпИ роЪрпЖропро▓рпНрокроЯро╡ро┐ро▓рпНро▓рпИ.")
        print(f"[ERROR] Failed to open gesture window: {e}")


# Multi-language translation loop with language selection
def translation_loop():
    # Language selection
    speak(
        "роорпКро┤ро┐рокрпЖропро░рпНрокрпНрокрпБ родрпЗро░рпНро╡рпБ: родрооро┐ро┤рпН to ро╣ро┐роирпНродро┐, родрооро┐ро┤рпН to роЗроЩрпНроХро┐ро▓рпАро╖рпН, родрпЖро▓рпБроЩрпНроХрпБ to ро╣ро┐роирпНродро┐, родрпЖро▓рпБроЩрпНроХрпБ to роЗроЩрпНроХро┐ро▓рпАро╖рпН, ро╣ро┐роирпНродро┐ to роЗроЩрпНроХро┐ро▓рпАро╖рпН, роЕро▓рпНро▓родрпБ роЗроЩрпНроХро┐ро▓рпАро╖рпН to ро╣ро┐роирпНродро┐ роОродрпИ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН?")
    print("ЁЯМН Select translation language pair:")
    print("1. Tamil тЮбя╕П Hindi")
    print("2. Tamil тЮбя╕П English")
    print("3. Telugu тЮбя╕П Hindi")
    print("4. Telugu тЮбя╕П English")
    print("5. Hindi тЮбя╕П English")
    print("6. English тЮбя╕П Hindi")

    while True:
        try:
            selection = recognize_speech().lower()
            log_conversation("User", f"Language selection: {selection}")

            # Parse language selection
            if any(word in selection for word in ["tamil hindi", "tamil to hindi", "one", "1", "родрооро┐ро┤рпН ро╣ро┐роирпНродро┐"]):
                source_lang = "tamil"
                target_lang = "hindi"
                break
            elif any(
                    word in selection for word in ["tamil english", "tamil to english", "two", "2", "родрооро┐ро┤рпН роЗроЩрпНроХро┐ро▓рпАро╖рпН"]):
                source_lang = "tamil"
                target_lang = "english"
                break
            elif any(
                    word in selection for word in ["telugu hindi", "telugu to hindi", "three", "3", "родрпЖро▓рпБроЩрпНроХрпБ ро╣ро┐роирпНродро┐"]):
                source_lang = "telugu"
                target_lang = "hindi"
                break
            elif any(word in selection for word in
                     ["telugu english", "telugu to english", "four", "4", "родрпЖро▓рпБроЩрпНроХрпБ роЗроЩрпНроХро┐ро▓рпАро╖рпН"]):
                source_lang = "telugu"
                target_lang = "english"
                break
            elif any(word in selection for word in
                     ["hindi english", "hindi to english", "five", "5", "ро╣ро┐роирпНродро┐ роЗроЩрпНроХро┐ро▓рпАро╖рпН"]):
                source_lang = "hindi"
                target_lang = "english"
                break
            elif any(word in selection for word in
                     ["english hindi", "english to hindi", "six", "6", "роЗроЩрпНроХро┐ро▓рпАро╖рпН ро╣ро┐роирпНродро┐"]):
                source_lang = "english"
                target_lang = "hindi"
                break
            else:
                speak("родрпЖро│ро┐ро╡ро╛рой родрпЗро░рпНро╡рпБ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН. роОрогрпНрогрпИропрпБроорпН роЪрпКро▓рпНро▓ро▓ро╛роорпН.")
                print("тЭМ Invalid selection. Please choose 1-6 or say the language pair clearly.")
                continue

        except Exception as e:
            speak("родрпЗро░рпНро╡рпБ рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. роорпАрогрпНроЯрпБроорпН роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН.")
            print(f"тЭМ Could not understand selection: {e}")
            continue

    # Confirm selection
    selection_msg = f"{source_lang.title()} тЮбя╕П {target_lang.title()} роорпКро┤ро┐рокрпЖропро░рпНрокрпНрокрпБ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХрокрпНрокроЯрпНроЯродрпБ."
    speak(selection_msg)
    log_conversation("Assistant", selection_msg)
    print(f"тЬЕ Selected: {source_lang.title()} тЮбя╕П {target_lang.title()}")

    # Start translation loop
    speak(
        f"{source_lang.title()} роорпКро┤ро┐ропро┐ро▓рпН рокрпЗроЪрпБроЩрпНроХро│рпН. {target_lang.title()} роорпКро┤ро┐ропро┐ро▓рпН роорпКро┤ро┐рокрпЖропро░рпНроХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ. роиро┐ро▒рпБродрпНрод 'stop' роОройрпНро▒рпБ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН.")
    log_conversation("Assistant", f"{source_lang.title()} тЮбя╕П {target_lang.title()} translator started")
    print(
        f"ЁЯЯв {source_lang.title()} тЮбя╕П {target_lang.title()} translator running. Say something in {source_lang.title()}.")

    while True:
        input_text = recognize_speech()
        log_conversation("User", input_text)

        if input_text.lower() in ["stop", "exit", "niruthu", "роиро┐ро▒рпБродрпНродрпБ", "роиро┐ро▒рпНроХро╡рпБроорпН", "ро╡рпЖро│ро┐ропрпЗро▒рпБ", "р░╡р▒Жр░▓р▒Бр░пр▒З", "рд░реБрдХреЛ",
                                  "рдмрдВрдж рдХрд░реЛ"]:
            speak("роорпКро┤ро┐рокрпЖропро░рпНрокрпНрокрпБ роиро┐ро▒рпБродрпНродрокрпНрокроЯрпНроЯродрпБ.")
            log_conversation("Assistant", "роорпКро┤ро┐рокрпЖропро░рпНрокрпНрокрпБ роиро┐ро▒рпБродрпНродрокрпНрокроЯрпНроЯродрпБ.")
            print("ЁЯЫС Exiting translator.")
            break

        if input_text.strip() == "":
            continue

        print(f"ЁЯЧгя╕П {source_lang.title()}: {input_text}")

        # Use existing translation function or extend for other languages
        if source_lang == "tamil" and target_lang == "hindi":
            translated_output = translate_tamil_to_hindi(input_text)
        else:
            # For other language pairs, use a generic translation function
            translated_output = translate_text(input_text, source_lang, target_lang)

        print(f"ЁЯУЭ {target_lang.title()}: {translated_output}")
        log_conversation("Assistant", translated_output)
        speak_text(translated_output)


def translate_text(text, source_lang, target_lang):
    """Generic translation function for multiple language pairs"""
    try:
        # Import translation library (you can use Google Translate API or similar)
        from googletrans import Translator
        translator = Translator()

        # Language code mapping
        lang_codes = {
            "tamil": "ta",
            "telugu": "te",
            "hindi": "hi",
            "english": "en"
        }

        source_code = lang_codes.get(source_lang, "ta")
        target_code = lang_codes.get(target_lang, "hi")

        result = translator.translate(text, src=source_code, dest=target_code)
        return result.text

    except Exception as e:
        print(f"тЭМ Translation error: {e}")
        # Fallback to existing function if available
        if source_lang == "tamil" and target_lang == "hindi":
            return translate_tamil_to_hindi(text)
        else:
            return f"Translation error for {source_lang} to {target_lang}: {text}"


def language_learning_mode():
    """Interactive Language Learning Mode with Tamil, English, and Hindi"""
    print("\nЁЯОУ === LANGUAGE LEARNING MODE ACTIVATED ===")
    speak("ро▓ро╛роЩрпНроХрпБро╡рпЗроЬрпН ро▓рпЗро░рпНройро┐роЩрпН роорпЛроЯрпН роЖроХрпНроЯро┐ро╡рпЗроЯрпН роЖропро┐ро░рпБроЪрпНроЪрпБ!")
    
    # Show available language combinations
    speak("роорпВройрпНро▒рпБ роорпКро┤ро┐роХро│рпН: родрооро┐ро┤рпН, роЗроЩрпНроХро┐ро▓рпАро╖рпН, ро╣ро┐роирпНродро┐. роОроирпНрод роорпКро┤ро┐ропро┐ро▓ро┐ро░рпБроирпНродрпБ роОроирпНрод роорпКро┤ро┐роХрпНроХрпБ роХро▒рпНроХ ро╡рпЗрогрпНроЯрпБроорпН?")
    print("ЁЯМН Available Language Learning Combinations:")
    print("1я╕ПтГг Tamil тЮбя╕П English (родрооро┐ро┤рпН тЮбя╕П роЗроЩрпНроХро┐ро▓рпАро╖рпН)")
    print("2я╕ПтГг Tamil тЮбя╕П Hindi (родрооро┐ро┤рпН тЮбя╕П ро╣ро┐роирпНродро┐)")
    print("3я╕ПтГг English тЮбя╕П Tamil (English тЮбя╕П родрооро┐ро┤рпН)")
    print("4я╕ПтГг English тЮбя╕П Hindi (English тЮбя╕П рд╣рд┐рдВрджреА)")
    print("5я╕ПтГг Hindi тЮбя╕П Tamil (рд╣рд┐рдВрджреА тЮбя╕П родрооро┐ро┤рпН)")
    print("6я╕ПтГг Hindi тЮбя╕П English (рд╣рд┐рдВрджреА тЮбя╕П English)")
    print("7я╕ПтГг Practice Mode (рокропро┐ро▒рпНроЪро┐ роорпЛроЯрпН)")
    print("8я╕ПтГг Quiz Mode (ро╡ро┐ройро╛роЯро┐ ро╡ро┐ройро╛)")
    print("9я╕ПтГг Learning Stats (роХро▒рпНро▒ро▓рпН рокрпБро│рпНро│ро┐ро╡ро┐ро╡ро░роорпН)")
    
    # Get user selection
    source_lang = ""
    target_lang = ""
    mode_type = "translation"
    
    while True:
        try:
            speak("роЙроЩрпНроХро│рпН родрпЗро░рпНро╡рпИ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН.")
            selection = recognize_speech().lower()
            log_conversation("User", selection)
            
            if any(word in selection for word in ["tamil english", "tamil to english", "one", "1", "родрооро┐ро┤рпН роЗроЩрпНроХро┐ро▓рпАро╖рпН"]):
                source_lang, target_lang = "tamil", "english"
                break
            elif any(word in selection for word in ["tamil hindi", "tamil to hindi", "two", "2", "родрооро┐ро┤рпН ро╣ро┐роирпНродро┐"]):
                source_lang, target_lang = "tamil", "hindi"
                break
            elif any(word in selection for word in ["english tamil", "english to tamil", "three", "3", "роЗроЩрпНроХро┐ро▓рпАро╖рпН родрооро┐ро┤рпН"]):
                source_lang, target_lang = "english", "tamil"
                break
            elif any(word in selection for word in ["english hindi", "english to hindi", "four", "4", "роЗроЩрпНроХро┐ро▓рпАро╖рпН ро╣ро┐роирпНродро┐"]):
                source_lang, target_lang = "english", "hindi"
                break
            elif any(word in selection for word in ["hindi tamil", "hindi to tamil", "five", "5", "ро╣ро┐роирпНродро┐ родрооро┐ро┤рпН"]):
                source_lang, target_lang = "hindi", "tamil"
                break
            elif any(word in selection for word in ["hindi english", "hindi to english", "six", "6", "ро╣iроирпНродро┐ роЗроЩрпНроХро┐рд▓рпАро╖рпН"]):
                source_lang, target_lang = "hindi", "english"
                break
            elif any(word in selection for word in ["practice", "seven", "7", "рокропро┐ро▒рпНроЪро┐", "practice mode"]):
                mode_type = "practice"
                break
            elif any(word in selection for word in ["quiz", "eight", "8", "ро╡ро┐ройро╛роЯро┐ ро╡ро┐ройро╛", "quiz mode"]):
                mode_type = "quiz"
                break
            elif any(word in selection for word in ["stats", "nine", "9", "рокрпБро│рпНро│ро┐ро╡ро┐ро╡ро░роорпН", "statistics"]):
                show_learning_stats()
                continue
            else:
                speak("родрпЖро│ро┐ро╡ро╛рой родрпЗро░рпНро╡рпБ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН. роТройрпНро▒рпБ роорпБродро▓рпН роТройрпНрокродрпБ ро╡ро░рпИ.")
                print("тЭМ Please choose 1-9 or say the option clearly.")
                continue
                
        except Exception as e:
            speak("родрпЗро░рпНро╡рпБ рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. роорпАрогрпНроЯрпБроорпН роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН.")
            print(f"тЭМ Could not understand selection: {e}")
            continue
    
    # Execute selected mode
    if mode_type == "practice":
        start_practice_mode()
    elif mode_type == "quiz":
        start_quiz_mode()
    else:
        start_learning_translation(source_lang, target_lang)


def start_learning_translation(source_lang, target_lang):
    """Start interactive learning translation"""
    selection_msg = f"{source_lang.title()} тЮбя╕П {target_lang.title()} роХро▒рпНро▒ро▓рпН роорпБро▒рпИ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХрокрпНрокроЯрпНроЯродрпБ."
    speak(selection_msg)
    log_conversation("Assistant", selection_msg)
    print(f"тЬЕ Learning Mode: {source_lang.title()} тЮбя╕П {target_lang.title()}")
    
    # Get practice suggestions
    language_pair = f"{source_lang}_{target_lang}"
    suggestions = language_learner.get_practice_suggestion(language_pair)
    
    if suggestions:
        speak("рокропро┐ро▒рпНроЪро┐роХрпНроХро╛рой роЪро┐ро▓ рокро░ро┐роирпНродрпБро░рпИроХро│рпН:")
        print("ЁЯТб Practice Suggestions:")
        for i, suggestion in enumerate(suggestions, 1):
            print(f"   {i}. {suggestion}")
    
    speak(f"{source_lang.title()} роорпКро┤ро┐ропро┐ро▓рпН рокрпЗроЪрпБроЩрпНроХро│рпН. ро╡ро┐ро░ро┐ро╡ро╛рой роХро▒рпНро▒ро▓рпН родроХро╡ро▓рпНроХро│рпБроЯройрпН {target_lang.title()} роорпКро┤ро┐ропро┐ро▓рпН роорпКро┤ро┐рокрпЖропро░рпНроХрпНроХрокрпНрокроЯрпБроорпН.")
    print(f"ЁЯОУ Learning Translation Mode Active. Say something in {source_lang.title()}.")
    
    while True:
        input_text = recognize_speech()
        log_conversation("User", input_text)
        
        if input_text.lower() in ["stop", "exit", "niruthu", "роиро┐ро▒рпБродрпНродрпБ", "quit", "learning complete"]:
            speak("роХро▒рпНро▒ро▓рпН роорпБро▒рпИ роиро┐ро▒рпБродрпНродрокрпНрокроЯрпНроЯродрпБ. роиройрпНро▒ро┐!")
            log_conversation("Assistant", "Language learning mode stopped.")
            print("ЁЯЫС Exiting language learning mode.")
            show_session_summary()
            break
            
        if input_text.strip() == "":
            continue
            
        print(f"ЁЯЧгя╕П {source_lang.title()}: {input_text}")
        
        # Get enhanced translation with learning features
        result = language_learner.translate_with_learning(input_text, source_lang, target_lang)
        
        translation = result.get('translation', 'Translation error')
        pronunciation = result.get('pronunciation', '')
        grammar_note = result.get('grammar_note', '')
        cultural_context = result.get('cultural_context', '')
        
        print(f"ЁЯУЭ {target_lang.title()}: {translation}")
        speak_text(translation)
        
        # Provide additional learning information
        if pronunciation:
            print(f"ЁЯФК Pronunciation: {pronunciation}")
            
        if grammar_note:
            print(f"ЁЯУЪ Grammar: {grammar_note}")
            speak(f"роХро┐ро░ро╛рооро░рпН роХрпБро▒ро┐рокрпНрокрпБ: {grammar_note}")
            
        if cultural_context:
            print(f"ЁЯМН Cultural Context: {cultural_context}")
            
        log_conversation("Assistant", f"Translation: {translation}")


def start_practice_mode():
    """Start practice mode with random phrases"""
    speak("рокропро┐ро▒рпНроЪро┐ роорпБро▒рпИ родрпКроЯроЩрпНроХрпБроХро┐ро▒родрпБ!")
    print("ЁЯПЛя╕П === PRACTICE MODE ===")
    
    # Choose a random language combination
    import random
    combinations = [
        ('tamil', 'english'), ('tamil', 'hindi'), ('english', 'tamil'),
        ('english', 'hindi'), ('hindi', 'tamil'), ('hindi', 'english')
    ]
    
    source_lang, target_lang = random.choice(combinations)
    speak(f"{source_lang.title()} роЗро▓ро┐ро░рпБроирпНродрпБ {target_lang.title()} рокропро┐ро▒рпНроЪро┐.")
    
    # Get practice phrases
    language_pair = f"{source_lang}_{target_lang}"
    suggestions = language_learner.get_practice_suggestion(language_pair)
    
    if not suggestions:
        speak("рокропро┐ро▒рпНроЪро┐роХрпНроХро╛рой роЪрпКро▒рпНроХро│рпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ. роорпБродро▓ро┐ро▓рпН роЪро┐ро▓ ро╡ро╛ро░рпНродрпНродрпИроХро│рпИ роХро▒рпНро▒рпБроХрпНроХрпКро│рпНро│рпБроЩрпНроХро│рпН.")
        return
    
    for phrase in suggestions:
        speak(f"роЗродрпИ роорпКро┤ро┐рокрпЖропро░рпНроХрпНроХро╡рпБроорпН: {phrase}")
        print(f"ЁЯФД Translate: {phrase}")
        
        user_translation = recognize_speech()
        if user_translation.lower() in ["stop", "exit", "skip"]:
            break
            
        correct_answer = language_learner.simple_translate(phrase, source_lang, target_lang)
        print(f"тЬЕ Correct Answer: {correct_answer}")
        speak(f"роЪро░ро┐ропро╛рой рокродро┐ро▓рпН: {correct_answer}")
        
        log_conversation("Practice", f"Q: {phrase} | User: {user_translation} | Correct: {correct_answer}")


def start_quiz_mode():
    """Start quiz mode"""
    speak("ро╡ро┐ройро╛роЯро┐ ро╡ро┐ройро╛ роорпБро▒рпИ!")
    print("ЁЯза === QUIZ MODE ===")
    
    # Ask for language combination
    speak("роОроирпНрод роорпКро┤ро┐ роХро▓ро╡рпИроХрпНроХрпБ ро╡ро┐ройро╛роЯро┐ ро╡ро┐ройро╛ ро╡рпЗрогрпНроЯрпБроорпН?")
    
    # For now, use a default combination
    source_lang, target_lang = "tamil", "english"
    
    quiz = language_learner.generate_quiz(source_lang, target_lang)
    
    if not quiz:
        speak("ро╡ро┐ройро╛роЯро┐ ро╡ро┐ройро╛ро╡рпБроХрпНроХрпБ рокрпЛродрпБрооро╛рой родроХро╡ро▓рпН роЗро▓рпНро▓рпИ. роорпБродро▓ро┐ро▓рпН роХрпКроЮрпНроЪроорпН роХро▒рпНро▒рпБроХрпНроХрпКро│рпНро│рпБроЩрпНроХро│рпН.")
        print("тЭМ Not enough learned words for quiz. Learn some words first.")
        return
    
    score = 0
    total_questions = len(quiz['questions'])
    
    speak(f"{total_questions} роХрпЗро│рпНро╡ро┐роХро│рпН роЙро│рпНро│рой.")
    
    for i, question in enumerate(quiz['questions'], 1):
        print(f"\nтЭУ Question {i}/{total_questions}: {question['question']}")
        speak(f"роХрпЗро│рпНро╡ро┐ {i}: {question['source_text']} роЗродрпИ роорпКро┤ро┐рокрпЖропро░рпНроХрпНроХро╡рпБроорпН.")
        
        user_answer = recognize_speech()
        correct_answer = question['correct_answer']
        
        if user_answer.lower().strip() == correct_answer.lower().strip():
            score += 1
            print("тЬЕ Correct!")
            speak("роЪро░ро┐!")
        else:
            print(f"тЭМ Wrong. Correct answer: {correct_answer}")
            speak(f"родро╡ро▒рпБ. роЪро░ро┐ропро╛рой рокродро┐ро▓рпН: {correct_answer}")
    
    # Show final score
    percentage = (score / total_questions) * 100
    print(f"\nЁЯПЖ Quiz Complete! Score: {score}/{total_questions} ({percentage:.1f}%)")
    speak(f"ро╡ро┐ройро╛роЯро┐ ро╡ро┐ройро╛ роорпБроЯро┐роирпНродродрпБ! роородро┐рокрпНрокрпЖрогрпН: {score} out of {total_questions}")
    
    log_conversation("Quiz", f"Score: {score}/{total_questions}")


def show_learning_stats():
    """Show learning statistics"""
    stats = language_learner.get_learning_stats()
    
    print("\nЁЯУК === LEARNING STATISTICS ===")
    print(f"ЁЯУЭ Total Translations: {stats['total_translations']}")
    print(f"ЁЯМН Languages Practiced: {len(stats['languages_practiced'])}")
    print(f"ЁЯОп This Session: {stats['session_count']} translations")
    
    mastery = stats['mastery_breakdown']
    print(f"ЁЯУИ Mastery Levels:")
    print(f"   ЁЯЯв Beginner: {mastery['beginner']}")
    print(f"   ЁЯЯб Intermediate: {mastery['intermediate']}")
    print(f"   ЁЯФ┤ Advanced: {mastery['advanced']}")
    
    # Speak key statistics
    speak(f"роорпКродрпНродроорпН {stats['total_translations']} роорпКро┤ро┐рокрпЖропро░рпНрокрпНрокрпБроХро│рпН роЪрпЖропрпНропрокрпНрокроЯрпНроЯрпБро│рпНро│рой.")
    
    log_conversation("Stats", f"Total: {stats['total_translations']}, Session: {stats['session_count']}")


def show_session_summary():
    """Show summary of current learning session"""
    session = language_learner.current_session
    
    if session['translations']:
        print(f"\nЁЯУЛ Session Summary: {len(session['translations'])} new translations learned")
        speak(f"роЗроирпНрод роЕрооро░рпНро╡ро┐ро▓рпН {len(session['translations'])} рокрпБродро┐роп роорпКро┤ро┐рокрпЖропро░рпНрокрпНрокрпБроХро│рпН роХро▒рпНро▒рпБроХрпНроХрпКрогрпНроЯрпАро░рпНроХро│рпН.")
    else:
        speak("роЗроирпНрод роЕрооро░рпНро╡ро┐ро▓рпН рокрпБродро┐роп роорпКро┤ро┐рокрпЖропро░рпНрокрпНрокрпБроХро│рпН роЗро▓рпНро▓рпИ.")


def debate_mode_session():
    """Interactive Debate Mode with AI"""
    print("\nЁЯОп === DEBATE MODE ACTIVATED ===")
    speak("роЯро┐рокрпЗроЯрпН роорпЛроЯрпН роЖроХрпНроЯро┐ро╡рпЗроЯрпН роЖропро┐ро░рпБроЪрпНроЪрпБ! Let's have an engaging discussion!")
    
    # Show debate options
    speak("роирпАроЩрпНроХро│рпН роОройрпНрой ро╡ро┐ро╖ропродрпНродрпИ рокро▒рпНро▒ро┐ ро╡ро┐ро╡ро╛родро┐роХрпНроХ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН?")
    print("ЁЯЧгя╕П Debate Mode Options:")
    print("1я╕ПтГг Choose a topic from suggestions")
    print("2я╕ПтГг Suggest your own topic")
    print("3я╕ПтГг Random topic surprise")
    print("4я╕ПтГг View debate statistics")
    print("5я╕ПтГг Exit debate mode")
    
    while True:
        try:
            speak("роЙроЩрпНроХро│рпН родрпЗро░рпНро╡рпИ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН.")
            selection = recognize_speech().lower()
            log_conversation("User", selection)
            
            if any(word in selection for word in ["suggestions", "choose topic", "one", "1", "рокро░ро┐роирпНродрпБро░рпИроХро│рпН"]):
                start_topic_selection()
                break
            elif any(word in selection for word in ["own topic", "suggest", "two", "2", "роОройрпН ро╡ро┐ро╖ропроорпН"]):
                start_custom_topic()
                break
            elif any(word in selection for word in ["random", "surprise", "three", "3", "роЪрпАро░ро▒рпНро▒"]):
                start_random_debate()
                break
            elif any(word in selection for word in ["statistics", "stats", "four", "4", "рокрпБро│рпНро│ро┐ро╡ро┐ро╡ро░роорпН"]):
                show_debate_statistics()
                continue
            elif any(word in selection for word in ["exit", "quit", "five", "5", "ро╡рпЖро│ро┐ропрпЗро▒рпБ"]):
                speak("роЯро┐рокрпЗроЯрпН роорпЛроЯрпН роиро┐ро▒рпБродрпНродрокрпНрокроЯрпНроЯродрпБ. роиройрпНро▒ро┐!")
                break
            else:
                speak("родрпЖро│ро┐ро╡ро╛рой родрпЗро░рпНро╡рпБ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН. роТройрпНро▒рпБ роорпБродро▓рпН роРроирпНродрпБ ро╡ро░рпИ.")
                print("тЭМ Please choose 1-5 or say the option clearly.")
                continue
                
        except Exception as e:
            speak("родрпЗро░рпНро╡рпБ рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. роорпАрогрпНроЯрпБроорпН роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН.")
            print(f"тЭМ Could not understand selection: {e}")
            continue


def start_topic_selection():
    """Start debate with topic suggestions"""
    suggestions = debate_mode.get_debate_suggestions()
    
    print("\nЁЯУЭ Suggested Debate Topics:")
    speak("роЗроЩрпНроХрпЗ роЪро┐ро▓ ро╡ро┐ро╡ро╛род родро▓рпИрокрпНрокрпБроХро│рпН:")
    
    for i, topic in enumerate(suggestions['suggested_topics'], 1):
        print(f"   {i}. {topic}")
    
    speak("роОроирпНрод родро▓рпИрокрпНрокрпИ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН?")
    print("ЁЯОп Say the number (1-5) or describe the topic you want to debate.")
    
    while True:
        try:
            choice = recognize_speech().lower()
            log_conversation("User", choice)
            
            # Check for numbers
            topic_selected = None
            for i, topic in enumerate(suggestions['suggested_topics'], 1):
                if str(i) in choice or f"number {i}" in choice:
                    topic_selected = topic
                    break
            
            if topic_selected:
                result = debate_mode.start_debate(topic_selected)
                start_debate_session(result)
                break
            else:
                speak("родрпЖро│ро┐ро╡ро╛рой роОрогрпН роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН роЕро▓рпНро▓родрпБ родро▓рпИрокрпНрокрпИ ро╡ро┐ро╡ро░ро┐роХрпНроХро╡рпБроорпН.")
                continue
                
        except Exception as e:
            speak("рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. роорпАрогрпНроЯрпБроорпН роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН.")
            continue


def start_custom_topic():
    """Start debate with user's custom topic"""
    speak("роЙроЩрпНроХро│рпН ро╡ро┐ро╡ро╛род родро▓рпИрокрпНрокрпИ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН.")
    print("ЁЯОд What would you like to debate about? State your topic:")
    
    try:
        custom_topic = recognize_speech()
        log_conversation("User", f"Custom topic: {custom_topic}")
        
        if custom_topic.strip():
            result = debate_mode.start_debate(custom_topic)
            speak(f"роЪро┐ро▒роирпНрод родро▓рпИрокрпНрокрпБ! {custom_topic} рокро▒рпНро▒ро┐ ро╡ро┐ро╡ро╛родро┐роХрпНроХро▓ро╛роорпН.")
            start_debate_session(result)
        else:
            speak("родро▓рпИрокрпНрокрпБ роХрпЗроЯрпНроХро╡ро┐ро▓рпНро▓рпИ. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.")
            
    except Exception as e:
        speak("родро▓рпИрокрпНрокрпБ рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ.")
        print(f"тЭМ Could not understand topic: {e}")


def start_random_debate():
    """Start debate with random topic"""
    suggestions = debate_mode.get_debate_suggestions()
    random_topic = suggestions['random_topic']
    
    speak(f"роЪрпАро░ро▒рпНро▒ родро▓рпИрокрпНрокрпБ: {random_topic}")
    print(f"ЁЯО▓ Random Topic: {random_topic}")
    
    result = debate_mode.start_debate(random_topic)
    start_debate_session(result)


def start_debate_session(debate_setup):
    """Main debate session loop"""
    print(f"\nЁЯОп Debate Topic: {debate_setup['topic']}")
    print("ЁЯУЛ Choose your position:")
    
    positions = debate_setup['suggested_positions']
    print(f"1я╕ПтГг PRO: {positions['pro']}")
    print(f"2я╕ПтГг CON: {positions['con']}")
    
    speak("роирпАроЩрпНроХро│рпН роОроирпНрод роиро┐ро▓рпИрокрпНрокро╛роЯрпНроЯрпИ роОроЯрпБроХрпНроХ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН? ро╡рпЗрогрпНроЯрпБроорпН роЕро▓рпНро▓родрпБ ро╡рпЗрогрпНроЯро╛роорпН?")
    
    # Get user position
    while True:
        try:
            position_choice = recognize_speech().lower()
            log_conversation("User", position_choice)
            
            user_position = ""
            if any(word in position_choice for word in ["pro", "support", "agree", "yes", "one", "1", "ро╡рпЗрогрпНроЯрпБроорпН"]):
                user_position = positions['pro']
            elif any(word in position_choice for word in ["con", "against", "disagree", "no", "two", "2", "ро╡рпЗрогрпНроЯро╛роорпН"]):
                user_position = positions['con']
            else:
                speak("PRO роЕро▓рпНро▓родрпБ CON родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН. роТройрпНро▒рпБ роЕро▓рпНро▓родрпБ роЗро░рогрпНроЯрпБ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН.")
                continue
            
            # Set positions and start debate
            setup_result = debate_mode.set_user_position(user_position)
            
            print(f"тЬЕ Your Position: {setup_result['user_position']}")
            print(f"ЁЯдЦ AI Position: {setup_result['ai_position']}")
            speak("роиро▓рпНро▓родрпБ! роиро╛ройрпН роОродро┐ро░рпН роиро┐ро▓рпИрокрпНрокро╛роЯрпНроЯрпИ роОроЯрпБрокрпНрокрпЗройрпН. роЙроЩрпНроХро│рпН роорпБродро▓рпН ро╡ро╛родродрпНродрпИ роорпБройрпНро╡рпИропрпБроЩрпНроХро│рпН.")
            
            # Start argument exchange
            conduct_debate_rounds()
            break
            
        except Exception as e:
            speak("роиро┐ро▓рпИрокрпНрокро╛роЯрпНроЯрпИ рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. роорпАрогрпНроЯрпБроорпН роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН.")
            continue


def conduct_debate_rounds():
    """Conduct the main debate argument exchange"""
    round_count = 0
    max_rounds = 5
    
    speak(f"ро╡ро┐ро╡ро╛родроорпН родрпКроЯроЩрпНроХрпБроХро┐ро▒родрпБ! роорпКродрпНродроорпН {max_rounds} роЪрпБро▒рпНро▒рпБроХро│рпН. роЙроЩрпНроХро│рпН ро╡ро╛родродрпНродрпИ роЖро░роорпНрокро┐роХрпНроХро╡рпБроорпН.")
    
    while round_count < max_rounds:
        print(f"\nЁЯФД Round {round_count + 1} of {max_rounds}")
        print("ЁЯОд Present your argument:")
        speak("роЙроЩрпНроХро│рпН ро╡ро╛родродрпНродрпИ роорпБройрпНро╡рпИропрпБроЩрпНроХро│рпН.")
        
        try:
            user_argument = recognize_speech()
            if not user_argument.strip():
                speak("ро╡ро╛родроорпН роХрпЗроЯрпНроХро╡ро┐ро▓рпНро▓рпИ. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.")
                continue
            
            log_conversation("User Argument", user_argument)
            print(f"ЁЯСд Your Argument: {user_argument}")
            
            # Get AI response
            result = debate_mode.process_user_argument(user_argument)
            
            print(f"\nЁЯдЦ AI Counter-Argument: {result['ai_argument']}")
            if result.get('ai_reasoning'):
                print(f"ЁЯУК AI Reasoning: {result['ai_reasoning']}")
            
            speak(f"роОройрпН рооро▒рпБрокрпНрокрпБ: {result['ai_argument']}")
            log_conversation("AI Counter-Argument", result['ai_argument'])
            
            # Show round evaluation
            evaluation = result['round_evaluation']
            print(f"\nЁЯУИ Round {result['round_number']} Evaluation:")
            print(f"ЁЯПЖ Round Winner: {evaluation['round_winner']}")
            print(f"ЁЯТм Feedback: {evaluation['feedback']}")
            print(f"тнР Strongest Point: {evaluation['strongest_point']}")
            
            # Update round count
            round_count = result['round_number']
            
            if not result['continue_debate']:
                break
                
            # Ask if user wants to continue
            speak("роЕроЯрпБродрпНрод роЪрпБро▒рпНро▒рпБроХрпНроХрпБ родропро╛ро░ро╛? Continue роОройрпНро▒рпБ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН.")
            continue_response = recognize_speech().lower()
            
            if any(word in continue_response for word in ["stop", "end", "finish", "роиро┐ро▒рпБродрпНродрпБ", "роорпБроЯро┐"]):
                break
                
        except Exception as e:
            speak("ро╡ро╛родродрпНродрпИ рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.")
            print(f"тЭМ Error in debate round: {e}")
            continue
    
    # End debate and show final results
    final_result = debate_mode.end_debate()
    show_debate_conclusion(final_result)


def show_debate_conclusion(final_result):
    """Show final debate results and evaluation"""
    print("\nЁЯПБ === DEBATE CONCLUDED ===")
    speak("ро╡ро┐ро╡ро╛родроорпН роорпБроЯро┐роирпНродродрпБ! роорпБроЯро┐ро╡рпБроХро│рпИ роХро╛рогрпНрокрпЛроорпН.")
    
    print(f"ЁЯПЖ Overall Winner: {final_result['overall_winner'].upper()}")
    print(f"ЁЯУК Final Score - You: {final_result['final_score']['user']}, AI: {final_result['final_score']['ai']}")
    
    speak(f"роТроЯрпНроЯрпБроорпКродрпНрод ро╡рпЖро▒рпНро▒ро┐ропро╛ро│ро░рпН: {final_result['overall_winner']}")
    
    print(f"\nтЬЕ Your Strengths: {', '.join(final_result['user_strengths'])}")
    print(f"ЁЯУИ Areas for Improvement: {', '.join(final_result['user_improvements'])}")
    print(f"ЁЯОп Key Insights: {', '.join(final_result['key_insights'])}")
    print(f"ЁЯУЪ Learning Outcomes: {', '.join(final_result['learning_outcomes'])}")
    print(f"\nЁЯУЭ Summary: {final_result['summary']}")
    
    speak("роЪро┐ро▒роирпНрод ро╡ро┐ро╡ро╛родроорпН! роирпАроЩрпНроХро│рпН роиро▓рпНро▓ро╛ рокроЩрпНроХрпЗро▒рпНро▒рпАро░рпНроХро│рпН.")
    log_conversation("Debate Conclusion", f"Winner: {final_result['overall_winner']}, Quality: {final_result['debate_quality']}")


def show_debate_statistics():
    """Show debate statistics and history"""
    stats = debate_mode.get_debate_stats()
    
    print("\nЁЯУК === DEBATE STATISTICS ===")
    print(f"ЁЯОп Total Debates: {stats['total_debates']}")
    print(f"ЁЯПЖ Your Wins: {stats['user_wins']} ({stats['user_win_rate']}%)")
    print(f"ЁЯдЦ AI Wins: {stats['ai_wins']} ({stats['ai_win_rate']}%)")
    print(f"ЁЯдЭ Draws: {stats['draws']} ({stats['draw_rate']}%)")
    
    if stats['recent_topics']:
        print("\nЁЯУЭ Recent Debate Topics:")
        for i, topic_info in enumerate(stats['recent_topics'], 1):
            print(f"   {i}. {topic_info['topic']} (Winner: {topic_info['winner']})")
    
    speak(f"роорпКродрпНродроорпН {stats['total_debates']} ро╡ро┐ро╡ро╛родроЩрпНроХро│рпН роЪрпЖропрпНродрпБро│рпНро│рпАро░рпНроХро│рпН. роЙроЩрпНроХро│рпН ро╡рпЖро▒рпНро▒ро┐ ро╡ро┐роХро┐родроорпН {stats['user_win_rate']} роЪродро╡рпАродроорпН.")


# Process user commands
def process_command(command):
    if not command:
        return

    print(f"[USER COMMAND]: {command}")
    log_conversation("User", command)

    # If gesture command
    if any(kw in command.lower() for kw in
           ["gesture", "роХрпИ роЪрпИроХрпИ", "open gesture", "start gesture", "роЖроХрпНроЯро┐ро╡рпЗроЯрпН роЬрпЖро╕рпНроЪро░рпН", "activate gesture"]):
        open_gesture_window()
        return

    # If GIF display command
    if any(kw in command.lower() for kw in ["gif", "show gif", "display gif", "GIF роХро╛роЯрпНроЯрпБ", "gif роХро╛роЯрпНроЯрпБ"]):
        listen_and_show_gif()
        return

    # If Spotify/music command
    if any(kw in command.lower() for kw in
           ["play song", "play music", "spotify", "рокро╛роЯро▓рпН роЗроЪрпИ", "роЗроЪрпИ роЗроЪрпИ", "song play", "music play", "рокрпНро│рпЗ рооро┐ропрпВроЪро┐роХрпН",
            "рооро┐ропрпВроЪро┐роХрпН рокрпНро│рпЗ"]):
        listen_for_song_request()
        return

    # If direct song search (contains "play" + song name)
    if "play" in command.lower() and len(command.split()) > 1:
        # Extract song name after "play"
        parts = command.lower().split("play", 1)
        if len(parts) > 1:
            song_name = parts[1].strip()
            if song_name:
                search_and_play_song_no_auth(song_name)  # Use no-auth version
                return

    # If user wants debate mode
    if any(kw in command.lower() for kw in ["debate mode", "debate", "ро╡ро┐ро╡ро╛родроорпН", "роЯро┐рокрпЗроЯрпН роорпЛроЯрпН", "discussion", "argue", "ро╡ро┐ро╡ро╛родро┐роХрпНроХ", "роЯро┐рокрпЗроЯрпН"]):
        debate_mode_session()
        return
    
    # If user wants language learning mode
    if any(kw in command.lower() for kw in ["language mode", "language learning", "ро▓ро╛ржВрпНроХрпБрд╡рзЗржЬрпН роорпЛржбр╡Н", "ржХрж░рзНрждрж▓ роорпБро▒рпИ", "learn language", "language teach", "роорпКро┤рж┐ ржХро░рзНржХ"]):
        language_learning_mode()
        return
    
    # If user wants translator mode (basic)
    if any(kw in command.lower() for kw in ["translator", "translate", "ржорзЛ┌Шрж┐ржкрзЗржпрж╝рж░р▒НржкрзНржкрзН", "tamil to hindi", "ржЖржХрзНржЯрж┐ржнрзЗрждрзН ржЯрзНрж░рж╛ржирзНрж╕рзНрж▓рзЗржЯрзН ржорзЛржбрж╝рзН", "ржЯрзНрж░рж╛ржирзНрж╕рзНрж▓рзЗрждрзН"]):
        translation_loop()
        return

    # If general task command
    if execute_command(command):
        log_conversation("Assistant", "Executed general task command.")
        return

    # If none of the above, use Gemini AI to respond with smart hardware
    smart_visual_feedback('thinking')
    response = get_response(command)
    log_conversation("Assistant", response)
    smart_speak_response(response)


# Smart hardware listening with fallback
def smart_listen_command():
    """Listen for commands using smart hardware manager with fallbacks"""
    try:
        hardware_manager = get_hardware_manager()
        
        # Use smart listening with fallback
        result = smart_listen(timeout=10, simulation_input="hello laura")
        
        if result['success']:
            print(f"ЁЯОд Input via {result['method_used']}: {result['data']}")
            return result['data']
        else:
            print(f"тЭМ Listening failed: {result['message']}")
            return ""
            
    except Exception as e:
        print(f"тЪая╕П Smart listen error: {e}")
        # Fallback to original listening
        try:
            return listen()
        except:
            return ""

# Smart speaking with hardware fallback
def smart_speak_response(message):
    """Speak response using smart hardware manager with fallbacks"""
    try:
        result = smart_speak(message)
        print(f"ЁЯФК Output via {result['method_used']}: {result['message']}")
        
        # Also provide visual feedback
        if "correct" in message.lower() or "good" in message.lower():
            smart_visual_feedback('celebrate')
        elif "thinking" in message.lower() or "processing" in message.lower():
            smart_visual_feedback('thinking')
        else:
            smart_visual_feedback('listening')
            
    except Exception as e:
        print(f"тЪая╕П Smart speak error: {e}")
        # Fallback to original speaking
        try:
            speak(message)
        except:
            print(f"[FALLBACK TEXT]: {message}")

# Hardware-aware command processing
def process_command_with_hardware(command):
    """Process commands with hardware awareness"""
    if not command:
        return

    print(f"[USER COMMAND]: {command}")
    log_conversation("User", command)

    # Hardware testing commands
    if any(kw in command.lower() for kw in ["test hardware", "hardware test", "check hardware", "hardware status"]):
        hardware_manager = get_hardware_manager()
        hardware_manager.test_all_hardware()
        smart_speak_response("ро╣ро╛ро░рпНроЯрпНро╡рпЗро░рпН роЯрпЖро╕рпНроЯрпН роорпБроЯро┐роирпНродродрпБ. роОро▓рпНро▓ро╛ роХроорпНрокрпЛройрпЖрогрпНроЯрпНро╕рпН роЪро░ро┐рокро╛ро░рпНроХрпНроХрокрпНрокроЯрпНроЯродрпБ.")
        return

    # Hardware report command  
    if any(kw in command.lower() for kw in ["hardware report", "system status", "роЪро┐ро╕рпНроЯроорпН ро╕рпНроЯрпЗроЯрпНроЯро╕рпН"]):
        hardware_manager = get_hardware_manager()
        hardware_manager.generate_hardware_report()
        smart_speak_response("роЪро┐ро╕рпНроЯроорпН ро░ро┐рокрпНрокрпЛро░рпНроЯрпН родропро╛ро░рпН. роХройрпНроЪрпЛро▓ро┐ро▓рпН рокро╛ро░рпНроХрпНроХро╡рпБроорпН.")
        return

    # Gesture recognition command
    if any(kw in command.lower() for kw in ["recognize gesture", "gesture recognition", "роХрпИ роЪрпИроХрпИ роЕроЯрпИропро╛ро│роорпН"]):
        result = smart_gesture_recognition()
        if result['success']:
            gesture = result['data']
            response = f"роХрпИ роЪрпИроХрпИ роХрогрпНроЯрпБрокро┐роЯро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ: {gesture}"
            smart_speak_response(response)
            smart_visual_feedback('celebrate')
        else:
            smart_speak_response("роХрпИ роЪрпИроХрпИ роХрогрпНроЯрпБрокро┐роЯро┐роХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ.")
        return

    # If gesture command (enhanced with hardware)
    if any(kw in command.lower() for kw in
           ["gesture", "роХрпИ роЪрпИроХрпИ", "open gesture", "start gesture", "роЖроХрпНроЯро┐ро╡рпЗроЯрпН роЬрпЖро╕рпНроЪро░рпН", "activate gesture"]):
        # Try smart gesture recognition first
        result = smart_gesture_recognition()
        if result['method_used'] == 'camera':
            smart_speak_response("роХрпЗрооро░ро╛ ро╡ро┤ро┐ропро╛роХ роХрпИ роЪрпИроХрпИ роЕроЯрпИропро╛ро│роорпН роХро╛рогрокрпНрокроЯрпБроХро┐ро▒родрпБ.")
        else:
            # Fallback to original gesture window
            open_gesture_window()
        return

    # If GIF display command
    if any(kw in command.lower() for kw in ["gif", "show gif", "display gif", "GIF роХро╛роЯрпНроЯрпБ", "gif роХро╛роЯрпНроЯрпБ"]):
        listen_and_show_gif()
        return

    # If Spotify/music command
    if any(kw in command.lower() for kw in
           ["play song", "play music", "spotify", "рокро╛роЯро▓рпН роЗроЪрпИ", "роЗроЪрпИ роЗроЪрпИ", "song play", "music play", "рокрпНро│рпЗ рооро┐ропрпВроЪро┐роХрпН",
            "рооро┐ропрпВроЪро┐роХрпН рокрпНро│рпЗ"]):
        listen_for_song_request()
        return

    # If direct song search (contains "play" + song name)
    if "play" in command.lower() and len(command.split()) > 1:
        # Extract song name after "play"
        parts = command.lower().split("play", 1)
        if len(parts) > 1:
            song_name = parts[1].strip()
            if song_name:
                search_and_play_song_no_auth(song_name)  # Use no-auth version
                return

    # If user wants debate mode
    if any(kw in command.lower() for kw in ["debate mode", "debate", "ро╡ро┐ро╡ро╛родроорпН", "роЯро┐рокрпЗроЯрпН роорпЛроЯрпН", "discussion", "argue", "ро╡ро┐ро╡ро╛родро┐роХрпНроХ", "роЯро┐рокрпЗроЯрпН"]):
        smart_visual_feedback('thinking')
        debate_mode_session()
        return
    
    # If user wants language learning mode
    if any(kw in command.lower() for kw in ["language mode", "language learning", "ро▓ро╛роЩрпНроХрпБрд╡реЗржЬрпН роорпЛроЯрзН", "ржХрж░рзНрждрж▓ роорпБро▒рпИ", "learn language", "language teach", "ржорзЛржЬрж┐ роХрж░рзНрдХ"]):
        smart_visual_feedback('listening')
        language_learning_mode()
        return
    
    # If user wants translator mode (basic)
    if any(kw in command.lower() for kw in ["translator", "translate", "ржорзЛржЬрж┐ржкрзЗржпрж╝рж░рзНржкрзНржкрзН", "tamil to hindi", "ржЖржХрзНржЯрж┐ржнрзЗ╪крзН ржЯрзНрж░рж╛ржирзНрж╕рзНрж▓рзЗржЯрзН ржорзЛржбрж╝рзН", "ржЯрзНрж░рж╛ржирзНрж╕рзНрж▓рзЗрждрзН"]):
        smart_visual_feedback('listening')
        translation_loop()
        return

    # If general task command
    if execute_command(command):
        log_conversation("Assistant", "Executed general task command.")
        smart_visual_feedback('celebrate')
        return

    # If none of the above, use Gemini AI to respond
    smart_visual_feedback('thinking')
    response = get_response(command)
    log_conversation("Assistant", response)
    smart_speak_response(response)

# Entry point
if __name__ == "__main__":
    print("ЁЯЪА Initializing Laura-bot with Smart Hardware Management...")
    
    # Initialize smart hardware management
    try:
        hardware_manager = initialize_smart_hardware()
        print("тЬЕ Smart hardware management initialized")
    except Exception as e:
        print(f"тЪая╕П Hardware initialization error: {e}")
        print("ЁЯдЦ Continuing with basic functionality...")
    
    welcome_msg = "ро╡рогроХрпНроХроорпН! роиро╛ройрпН ро▓ро╛ро░ро╛. роЗройрпНро▒рпБ роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роОрокрпНрокроЯро┐ роЙродро╡ роорпБроЯро┐ропрпБроорпН?"
    smart_speak_response(welcome_msg)
    log_conversation("Assistant", welcome_msg)
    
    print("\nЁЯТб Available Commands:")
    print("ЁЯОд Voice Commands: 'debate mode', 'language learning', 'play music'")
    print("ЁЯФз Hardware Commands: 'test hardware', 'hardware report', 'recognize gesture'")
    print("ЁЯОо Gesture Commands: 'gesture', 'activate gesture'")
    print("ЁЯМР Web Interface: Run 'python laura_bot_server.py' for web access")
    print("\nЁЯОп Say something to start...")
    
    while True:
        try:
            command = smart_listen_command()
            process_command_with_hardware(command)
        except KeyboardInterrupt:
            print("\nЁЯСЛ Goodbye!")
            smart_speak_response("ро╡рогроХрпНроХроорпН! роорпАрогрпНроЯрпБроорпН ро╡ро░рпБроХ!")
            
            # Cleanup hardware
            try:
                hardware_manager = get_hardware_manager()
                hardware_manager.cleanup()
            except:
                pass
            break
        except Exception as e:
            print(f"тЪая╕П Main loop error: {e}")
            smart_speak_response("рооройрпНройро┐роХрпНроХро╡рпБроорпН, роПродрпЛ рокро┐ро░роЪрпНроЪройрпИ. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.")
            continue